package com.malwarebytes.resources;

import com.malwarebytes.App;
import com.malwarebytes.generator.Snowflake;
import com.malwarebytes.kafka.KafkaApi;
import com.malwarebytes.model.CardInfo;
import com.malwarebytes.model.Card;
import com.malwarebytes.models.AuthResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.Valid;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

@Path("/api")
@Produces(MediaType.APPLICATION_JSON)
public class AuthResource {
    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);
    private final KafkaApi<CardInfo> kafkaApi;
    private final Snowflake snowflake;

    public AuthResource(final KafkaApi<CardInfo> kafkaApi, Snowflake snowflake){
        this.kafkaApi = kafkaApi;
        this.snowflake = snowflake;
    }

    @POST
    @Path("/auth")
    public Response tokenize(@Valid final Card card){
        LOGGER.info("Card information ${}", card);
        final CardInfo cardInfo = getCardInfo(card);
        kafkaApi.send(cardInfo);
        return Response
                .ok(new AuthResponse(true, "" + cardInfo.getTransactionId()))
                .build();
    }

    private CardInfo getCardInfo(Card card){
        return CardInfo.builder()
                .cardNumber(card.getCardNumber())
                .cardCVV(card.getCardCVV())
                .expirationDate(card.getExpirationDate())
                .transactionId(String.valueOf(snowflake.nextId()))
                .build();
    }
}
