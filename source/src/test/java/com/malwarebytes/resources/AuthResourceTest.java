package com.malwarebytes.resources;

import com.malwarebytes.generator.Snowflake;
import com.malwarebytes.kafka.KafkaApi;
import com.malwarebytes.model.Card;
import com.malwarebytes.model.CardInfo;
import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
import io.dropwizard.testing.junit5.ResourceExtension;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import javax.ws.rs.client.Entity;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import static org.mockito.Mockito.*;

@ExtendWith(DropwizardExtensionsSupport.class)
public class AuthResourceTest {

    private static final Snowflake snowflake = mock(Snowflake.class);
    private static final KafkaApi<CardInfo> kafkaApi = mock(KafkaApi.class);
    private static final String TRANSACTION_ID = "770975262825709568";

    private static final ResourceExtension RULE = ResourceExtension.builder()
            .addResource(new AuthResource(kafkaApi, snowflake))
            .build();

    private Card card;
    private Card invalidCardNumberCard;
    private Card invalidCVVCard;
    private Card invalidDateCard;
    private CardInfo cardInfo;

    @BeforeEach
    void setup() {
        card = new Card("1234567890", "01/22", "123");
        invalidCardNumberCard = new Card("123456789", "01/22", "123");
        invalidDateCard = new Card("123456789", "222", "123");
        invalidCVVCard = new Card("123456789", "01/22", "12");
        cardInfo = CardInfo.builder()
                .cardCVV(card.getCardCVV())
                .cardNumber(card.getCardNumber())
                .expirationDate(card.getExpirationDate())
                .transactionId(TRANSACTION_ID)
                .build();
    }

    @Test
    @DisplayName("Test: Run test with valid card")
    public void test_createValidCard(){
        when(snowflake.nextId()).thenReturn(Long.parseLong(TRANSACTION_ID));
        doNothing().when(kafkaApi).send(cardInfo);

        Response res =  RULE.target("/api/auth")
                .request()
                .accept(MediaType.APPLICATION_JSON)
                .post(Entity.entity(card, MediaType.APPLICATION_JSON), Response.class);

        Assertions.assertEquals(200, res.getStatus());
    }

    @Test
    @DisplayName("Test: Run test with valid invalid card number")
    public void test_withInvalidCardNumber(){
        when(snowflake.nextId()).thenReturn(Long.parseLong(TRANSACTION_ID));
        doNothing().when(kafkaApi).send(cardInfo);

        Response res =  RULE.target("/api/auth")
                .request()
                .accept(MediaType.APPLICATION_JSON)
                .post(Entity.entity(invalidCardNumberCard, MediaType.APPLICATION_JSON), Response.class);

        Assertions.assertEquals(422, res.getStatus());
    }


    @Test
    @DisplayName("Test: Run test with valid invalid CVV")
    public void test_withInvalidCVV(){
        when(snowflake.nextId()).thenReturn(Long.parseLong(TRANSACTION_ID));
        doNothing().when(kafkaApi).send(cardInfo);

        Response res =  RULE.target("/api/auth")
                .request()
                .accept(MediaType.APPLICATION_JSON)
                .post(Entity.entity(invalidCVVCard, MediaType.APPLICATION_JSON), Response.class);

        Assertions.assertEquals(422, res.getStatus());
    }

    @Test
    @DisplayName("Test: Run test with valid invalid Date")
    public void test_withInvalidDate(){
        when(snowflake.nextId()).thenReturn(Long.parseLong(TRANSACTION_ID));
        doNothing().when(kafkaApi).send(cardInfo);

        Response res =  RULE.target("/api/auth")
                .request()
                .accept(MediaType.APPLICATION_JSON)
                .post(Entity.entity(invalidDateCard, MediaType.APPLICATION_JSON), Response.class);

        Assertions.assertEquals(422, res.getStatus());
    }
}
