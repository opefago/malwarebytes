package com.malwarebytes;

import com.malwarebytes.config.FlowConfiguration;
import com.malwarebytes.kafka.KafkaApi;
import com.malwarebytes.kafka.KafkaCreatorFactory;
import com.malwarebytes.model.TokenInfo;
import com.malwarebytes.repository.KeyRepository;
import com.malwarebytes.services.EncryptionService;
import io.dropwizard.Application;
import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
import io.dropwizard.redis.RedisClientBundle;
import io.dropwizard.redis.RedisClientFactory;
import io.dropwizard.setup.Bootstrap;
import io.dropwizard.setup.Environment;
import io.lettuce.core.api.StatefulRedisConnection;

public class App extends Application<FlowConfiguration> {

    private final RedisClientBundle<String, String, FlowConfiguration> redis = new RedisClientBundle<String, String, FlowConfiguration>() {
        @Override
        public RedisClientFactory<String, String> getRedisClientFactory(FlowConfiguration configuration) {
            return configuration.getRedisClientFactory();
        }
    };

    @Override
    public void initialize(Bootstrap<FlowConfiguration> bootstrap) {
        bootstrap.addBundle(redis);
        bootstrap.setConfigurationSourceProvider(new ResourceConfigurationSourceProvider());
        super.initialize(bootstrap);
    }

    @Override
    public void run(FlowConfiguration configuration, Environment environment) throws Exception {
        final StatefulRedisConnection<String, String> connection = redis.getConnection();
        final KafkaApi<TokenInfo> kafkaApi = new KafkaCreatorFactory().create(
                configuration.getKafkaProducerConfig()
        );

        final KeyRepository keyRepository = new KeyRepository(connection);
        final EncryptionService encryptionService = new EncryptionService();
        configuration.getKafkaConsumerCreatorFactory().build(environment, record -> {
                    try {
                        final String key = encryptionService.generateKey(32);
                        final String token = encryptionService.tokenize(record, key);
                        keyRepository.setKey(record.getTransactionId(), key);
                        kafkaApi.send(new TokenInfo(record.getTransactionId(), token));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                });
    }


    public static void main( String[] args ) throws Exception
    {
        new App().run(args);
    }
}
