package com.malwarebytes;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.malwarebytes.model.Card;
import com.malwarebytes.services.EncryptionService;
import io.dropwizard.Application;
import io.dropwizard.configuration.ResourceConfigurationSourceProvider;
import io.dropwizard.redis.RedisClientBundle;
import io.dropwizard.redis.RedisClientFactory;
import io.dropwizard.setup.Bootstrap;
import io.dropwizard.setup.Environment;
import io.lettuce.core.api.StatefulRedisConnection;
import com.malwarebytes.config.ProofConfiguration;
import com.malwarebytes.repository.KeyRepository;

import java.util.HashMap;
import java.util.Map;

public class App extends Application<ProofConfiguration> {

    private final RedisClientBundle<String, String, ProofConfiguration> redis = new RedisClientBundle<String, String, ProofConfiguration>() {
        @Override
        public RedisClientFactory<String, String> getRedisClientFactory(ProofConfiguration configuration) {
            return configuration.getRedisClientFactory();
        }
    };

    @Override
    public void initialize(Bootstrap<ProofConfiguration> bootstrap) {
        bootstrap.addBundle(redis);
        bootstrap.setConfigurationSourceProvider(new ResourceConfigurationSourceProvider());
        super.initialize(bootstrap);
    }

    @Override
    public void run(ProofConfiguration configuration, Environment environment) throws Exception {
        final StatefulRedisConnection<String, String> connection = redis.getConnection();


        final KeyRepository keyRepository = new KeyRepository(connection);
        final EncryptionService encryptionService = new EncryptionService();
        configuration.getKafkaConsumerCreatorFactory().build(environment, record -> {
                    try {
                        String key = keyRepository.getKey(record.getTransactionId());
                        Card card = encryptionService.deTokenize(record.getToken(), key);
                        card.setExpirationDate(formatExpiryDate(card.getExpirationDate()));
                        prettyPrint(record.getTransactionId(), card);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                });
    }

    private String formatExpiryDate(String oldDate){
        if(oldDate == null || oldDate.isEmpty()){
            return null;
        }
        return oldDate.substring(0, 2) + "/" + oldDate.substring(2, 4);
    }

    private void prettyPrint(String transactionId, Card card) throws JsonProcessingException {
        Map<String, Card> map = new HashMap<>();
        map.put(transactionId, card);

        ObjectMapper mapper = new ObjectMapper();
        String jsonResult = mapper.writerWithDefaultPrettyPrinter()
                .writeValueAsString(map);
        System.out.println(jsonResult);
    }


    public static void main( String[] args ) throws Exception
    {
        new App().run(args);
    }
}
